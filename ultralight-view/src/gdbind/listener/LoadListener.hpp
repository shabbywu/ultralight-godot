#pragma once
#include <Ultralight/Ultralight.h>
#include <functional>
#include <ulbind17/detail/function/type_traits.hpp>
namespace gdbind {
struct LoadListener : public ultralight::LoadListener {

    ///
    /// Called when the page begins loading a new URL into a frame.
    ///
    /// @param  frame_id       A unique ID for the frame.
    ///
    /// @param  is_main_frame  Whether or not this is the main frame.
    ///
    /// @param  url            The URL for the load.
    ///
    virtual void OnBeginLoading(ultralight::View *caller, uint64_t frame_id, bool is_main_frame,
                                const ultralight::String &url) {
        if (onBeginLoading)
            onBeginLoading(caller, frame_id, is_main_frame, url);
    }
    std::function<void(ultralight::View *caller, uint64_t frame_id, bool is_main_frame, const ultralight::String &url)>
        onBeginLoading;

    ///
    /// Called when the page finishes loading a URL into a frame.
    ///
    /// @param  frame_id       A unique ID for the frame.
    ///
    /// @param  is_main_frame  Whether or not this is the main frame.
    ///
    /// @param  url            The URL for the load.
    ///
    virtual void OnFinishLoading(ultralight::View *caller, uint64_t frame_id, bool is_main_frame,
                                 const ultralight::String &url) {
        if (onFinishLoading) {
            onFinishLoading(caller, frame_id, is_main_frame, url);
        }
    }
    std::function<void(ultralight::View *caller, uint64_t frame_id, bool is_main_frame, const ultralight::String &url)>
        onFinishLoading;

    ///
    /// Called when an error occurs while loading a URL into a frame.
    ///
    /// @param  frame_id       A unique ID for the frame.
    ///
    /// @param  is_main_frame  Whether or not this is the main frame.
    ///
    /// @param  url            The URL for the load.
    ///
    /// @param  description    A human-readable description of the error.
    ///
    /// @param  error_domain   The name of the module that triggered the error.
    ///
    /// @param  error_code     Internal error code generated by the module.
    ///
    virtual void OnFailLoading(ultralight::View *caller, uint64_t frame_id, bool is_main_frame,
                               const ultralight::String &url, const ultralight::String &description,
                               const ultralight::String &error_domain, int error_code) {
        if (onFailLoading) {
            onFailLoading(caller, frame_id, is_main_frame, url, description, error_domain, error_code);
        }
    }
    std::function<void(ultralight::View *caller, uint64_t frame_id, bool is_main_frame, const ultralight::String &url,
                       const ultralight::String &description, const ultralight::String &error_domain, int error_code)>
        onFailLoading;

    ///
    /// Called when the JavaScript window object is reset for a new page load.
    ///
    /// This is called before any scripts are executed on the page and is the earliest time to setup
    /// any initial JavaScript state or bindings.
    ///
    /// The document is not guaranteed to be loaded/parsed at this point. If you need to make any
    /// JavaScript calls that are dependent on DOM elements or scripts on the page, use OnDOMReady
    /// instead.
    ///
    /// The window object is lazily initialized (this will not be called on pages with no scripts).
    ///
    /// @param  frame_id       A unique ID for the frame.
    ///
    /// @param  is_main_frame  Whether or not this is the main frame.
    ///
    /// @param  url            The URL for the load.
    ///
    virtual void OnWindowObjectReady(ultralight::View *caller, uint64_t frame_id, bool is_main_frame,
                                     const ultralight::String &url) {
        if (onWindowObjectReady) {
            onWindowObjectReady(caller, frame_id, is_main_frame, url);
        }
    }
    std::function<void(ultralight::View *caller, uint64_t frame_id, bool is_main_frame, const ultralight::String &url)>
        onWindowObjectReady;

    ///
    /// Called when all JavaScript has been parsed and the document is ready.
    ///
    /// This is the best time to make any JavaScript calls that are dependent on DOM elements or
    /// scripts on the page.
    ///
    /// @param  frame_id       A unique ID for the frame.
    ///
    /// @param  is_main_frame  Whether or not this is the main frame.
    ///
    /// @param  url            The URL for the load.
    ///
    virtual void OnDOMReady(ultralight::View *caller, uint64_t frame_id, bool is_main_frame,
                            const ultralight::String &url) {
        if (onDOMReady) {
            onDOMReady(caller, frame_id, is_main_frame, url);
        }
    }
    std::function<void(ultralight::View *caller, uint64_t frame_id, bool is_main_frame, const ultralight::String &url)>
        onDOMReady;

    ///
    /// Called when the session history (back/forward state) is modified.
    ///
    virtual void OnUpdateHistory(ultralight::View *caller) {
        if (onUpdateHistory) {
            onUpdateHistory(caller);
        }
    }
    std::function<void(ultralight::View *caller)> onUpdateHistory;
};
} // namespace gdbind